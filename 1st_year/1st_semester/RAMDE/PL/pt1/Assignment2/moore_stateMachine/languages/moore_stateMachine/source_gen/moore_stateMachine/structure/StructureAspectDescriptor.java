package moore_stateMachine.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAction = createDescriptorForAction();
  /*package*/ final ConceptDescriptor myConceptEvent = createDescriptorForEvent();
  /*package*/ final ConceptDescriptor myConceptState = createDescriptorForState();
  /*package*/ final ConceptDescriptor myConceptStateMachine = createDescriptorForStateMachine();
  /*package*/ final ConceptDescriptor myConceptTransition = createDescriptorForTransition();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAction, myConceptEvent, myConceptState, myConceptStateMachine, myConceptTransition);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Action:
        return myConceptAction;
      case LanguageConceptSwitch.Event:
        return myConceptEvent;
      case LanguageConceptSwitch.State:
        return myConceptState;
      case LanguageConceptSwitch.StateMachine:
        return myConceptStateMachine;
      case LanguageConceptSwitch.Transition:
        return myConceptTransition;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("moore_stateMachine", "Action", 0x37c2cb4348354f1dL, 0xb1474442de330b2cL, 0x25df9cb315087cf9L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:3ea8c113-72f6-4a38-a9ee-f97352d0bed1(moore_stateMachine.structure)/2729072192175766777");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEvent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("moore_stateMachine", "Event", 0x37c2cb4348354f1dL, 0xb1474442de330b2cL, 0x25df9cb315079f49L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:3ea8c113-72f6-4a38-a9ee-f97352d0bed1(moore_stateMachine.structure)/2729072192175710025");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForState() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("moore_stateMachine", "State", 0x37c2cb4348354f1dL, 0xb1474442de330b2cL, 0x25df9cb315079f4cL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:3ea8c113-72f6-4a38-a9ee-f97352d0bed1(moore_stateMachine.structure)/2729072192175710028");
    b.version(2);
    b.associate("action", 0x582031a9ad9e91d0L).target(0x37c2cb4348354f1dL, 0xb1474442de330b2cL, 0x25df9cb315087cf9L).optional(true).origin("6350130079424483792").done();
    b.aggregate("transition", 0x25df9cb315086877L).target(0x37c2cb4348354f1dL, 0xb1474442de330b2cL, 0x25df9cb315079f4fL).optional(true).ordered(true).multiple(true).origin("2729072192175761527").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStateMachine() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("moore_stateMachine", "StateMachine", 0x37c2cb4348354f1dL, 0xb1474442de330b2cL, 0x25df9cb315066ad0L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0x4caf0310491e41f5L, 0x8a9b2006b3a94898L, 0x40c1a7cb987d20d5L);
    b.origin("r:3ea8c113-72f6-4a38-a9ee-f97352d0bed1(moore_stateMachine.structure)/2729072192175631056");
    b.version(2);
    b.associate("initialState", 0x25df9cb315086404L).target(0x37c2cb4348354f1dL, 0xb1474442de330b2cL, 0x25df9cb315079f4cL).optional(false).origin("2729072192175760388").done();
    b.aggregate("event", 0x25df9cb315085fa0L).target(0x37c2cb4348354f1dL, 0xb1474442de330b2cL, 0x25df9cb315079f49L).optional(true).ordered(true).multiple(true).origin("2729072192175759264").done();
    b.aggregate("state", 0x25df9cb315085fa2L).target(0x37c2cb4348354f1dL, 0xb1474442de330b2cL, 0x25df9cb315079f4cL).optional(true).ordered(true).multiple(true).origin("2729072192175759266").done();
    b.aggregate("action", 0x582031a9ad9e9e3eL).target(0x37c2cb4348354f1dL, 0xb1474442de330b2cL, 0x25df9cb315087cf9L).optional(true).ordered(true).multiple(true).origin("6350130079424486974").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTransition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("moore_stateMachine", "Transition", 0x37c2cb4348354f1dL, 0xb1474442de330b2cL, 0x25df9cb315079f4fL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:3ea8c113-72f6-4a38-a9ee-f97352d0bed1(moore_stateMachine.structure)/2729072192175710031");
    b.version(2);
    b.associate("event", 0x25df9cb31508686eL).target(0x37c2cb4348354f1dL, 0xb1474442de330b2cL, 0x25df9cb315079f49L).optional(true).origin("2729072192175761518").done();
    b.associate("target", 0x25df9cb315086872L).target(0x37c2cb4348354f1dL, 0xb1474442de330b2cL, 0x25df9cb315079f4cL).optional(true).origin("2729072192175761522").done();
    return b.create();
  }
}
